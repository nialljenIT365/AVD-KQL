let
    // Define a list of IP ranges (replace or add more IPs as necessary)
    ipRanges = {
        "148.64.5.0/24", "148.64.9.0/24", "148.64.24.0/24", "148.64.27.0/24",
        "148.64.28.0/24", "148.64.29.0/24", "103.246.37.0/24", "103.246.38.0/24",
        "148.64.15.0/24", "148.64.16.0/24", "148.64.18.0/24", "148.64.21.0/24",
        "148.64.3.0/24", "148.64.31.0/24", "168.149.128.0/24", "168.149.133.0/24",
        "168.149.142.0/24", "168.149.143.0/24", "168.149.144.0/24", "168.149.145.0/24",
        "168.149.146.0/24", "168.149.150.0/24", "168.149.151.0/24", "168.149.152.0/24",
        "168.149.153.0/24", "168.149.157.0/24", "168.149.160.0/24", "168.149.164.0/24",
        "168.149.178.0/24", "168.149.179.0/26", "168.149.179.64/27", "170.176.240.0/24",
        "170.176.241.0/24", "199.116.168.0/24", "199.116.170.0/24", "199.116.171.0/24",
        "199.116.173.0/24", "199.19.248.0/24", "199.19.253.0/24", "199.247.32.0/24",
        "199.247.33.0/24", "199.247.42.0/24", "199.247.43.0/24", "199.247.44.0/24",
        "199.247.45.0/24", "35.192.241.0/24", "52.169.10.218", "52.166.243.189",
        "172.200.133.108", "52.176.212.104", "40.119.193.62", "13.75.88.62",
        "64.69.175.81", "185.38.106.68", "203.99.207.50", "203.99.206.243",
        "213.86.51.131", "157.120.242.130", "38.98.247.194"
    },

    // Remove duplicates from the list to ensure unique values
    uniqueIPRanges = List.Distinct(ipRanges),

    // Create a table from the list of unique IP ranges
    ipRangeTable = Table.FromList(
        uniqueIPRanges,  // Use the unique list of IP ranges
        Splitter.SplitByNothing(),
        {"IP Range"}, // Column name
        null,
        ExtraValues.Error
    ),
    #"1-fn_GetIPRange (Numeric)" = Table.AddColumn(ipRangeTable, "IPRangeHandler", each #"1-fn_GetIPRange (Numeric)"([IP Range])),
    #"Expanded IPRangeHandler" = Table.ExpandRecordColumn(#"1-fn_GetIPRange (Numeric)", "IPRangeHandler", {"FirstUsableIP", "LastUsableIP"}, {"FirstUsableIP", "LastUsableIP"}),
    #"4-fn_ConvertIP4toNumeric1" = Table.AddColumn(#"Expanded IPRangeHandler", "FirstUsableIP-Numeric", each #"4-fn_ConvertIP4toNumeric"([FirstUsableIP])),
    #"4-fn_ConvertIP4toNumeric2" = Table.AddColumn(#"4-fn_ConvertIP4toNumeric1", "LastUsableIP-Numeric", each #"4-fn_ConvertIP4toNumeric"([LastUsableIP])),
    #"Extract 1st2Octets" = Table.AddColumn(#"4-fn_ConvertIP4toNumeric2", "Text Before Delimiter", each Text.BeforeDelimiter([FirstUsableIP], ".", {1, RelativePosition.FromEnd}), type text),
    #"Renamed Columns" = Table.RenameColumns(#"Extract 1st2Octets",{{"Text Before Delimiter", "FirstUsableIP-1st2Octets"}}),
    #"Inserted Text Before Delimiter" = Table.AddColumn(#"Renamed Columns", "Text Before Delimiter", each Text.BeforeDelimiter([LastUsableIP], ".", {1, RelativePosition.FromEnd}), type text),
    #"Renamed Columns1" = Table.RenameColumns(#"Inserted Text Before Delimiter",{{"Text Before Delimiter", "LastUsableIP-1st2Octets"}}),
    #"Inserted Text Before Delimiter1" = Table.AddColumn(#"Renamed Columns1", "Text Before Delimiter", each Text.BeforeDelimiter([FirstUsableIP], ".", {0, RelativePosition.FromEnd}), type text),
    #"Renamed Columns3" = Table.RenameColumns(#"Inserted Text Before Delimiter1",{{"Text Before Delimiter", "FirstUsableIP-1st3Octets"}}),
    #"Inserted Text Before Delimiter2" = Table.AddColumn(#"Renamed Columns3", "Text Before Delimiter", each Text.BeforeDelimiter([LastUsableIP], ".", {0, RelativePosition.FromEnd}), type text),
    #"Renamed Columns2" = Table.RenameColumns(#"Inserted Text Before Delimiter2",{{"Text Before Delimiter", "LastUsableIP-1st3Octets"}}),
    #"4-fn_ConvertIP4toNumeric3" = Table.AddColumn(#"Renamed Columns2", "FirstUsableIP-1st2Octets-Numeric", each #"4-fn_ConvertIP4toNumeric"([#"FirstUsableIP-1st2Octets"])),
    #"4-fn_ConvertIP4toNumeric4" = Table.AddColumn(#"4-fn_ConvertIP4toNumeric3", "LastUsableIP-1st2Octets-Numeric", each #"4-fn_ConvertIP4toNumeric"([#"LastUsableIP-1st2Octets"])),
    #"4-fn_ConvertIP4toNumeric5" = Table.AddColumn(#"4-fn_ConvertIP4toNumeric4", "FirstUsableIP-1st3Octets-Numeric", each #"4-fn_ConvertIP4toNumeric"([#"FirstUsableIP-1st3Octets"])),
    #"4-fn_ConvertIP4toNumeric6" = Table.AddColumn(#"4-fn_ConvertIP4toNumeric5", "LastUsableIP-1st3Octets-Numeric", each #"4-fn_ConvertIP4toNumeric"([#"LastUsableIP-1st3Octets"])),
    #"2-fn_GetIPAddressDetails (API)" = Table.AddColumn(#"4-fn_ConvertIP4toNumeric6", "fn_GetIPAddressDetails", each #"2-fn_GetIPAddressDetails (API)"([FirstUsableIP])),
    #"Expanded fn_GetIPAddressDetails" = Table.ExpandTableColumn(#"2-fn_GetIPAddressDetails (API)", "fn_GetIPAddressDetails", {"city", "country", "countryCode", "isp", "lat", "lon", "org", "regionName", "timezone"}, {"city", "country", "countryCode", "isp", "lat", "lon", "org", "regionName", "timezone"}),

    // Add a new "Route" column based on conditions applied to the "org" column
    #"Added Route Column" = Table.AddColumn(#"Expanded fn_GetIPAddressDetails", "Route", 
        each if Text.Contains([org], "Symantec") then "WSS Proxy" 
        else if Text.Contains([org], "Blue Coat") then "WSS Proxy" 
        else if Text.Contains([org], "Azure Cloud") then "abrdn Azure" 
        else if Text.Contains([org], "Cognizant") then "Cognizant" 
        else if Text.Contains([org], "Google Cloud") then "Google Cloud" 
        else "abrdn DC"
    ),
    #"Added Conditional Column" = Table.AddColumn(#"Added Route Column", "Country Groupings", each if Text.Contains([timezone], "Europe") then "EMEA" else if Text.Contains([timezone], "Asia") then "APAC" else if Text.Contains([timezone], "America") then "AMRS" else "Other")
in
    #"Added Conditional Column"
