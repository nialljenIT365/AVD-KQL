// HealthChecks of SessionHost 

// Renders a summary of SessionHost health status. 

let HealthCheckIdToDescription = (idx: long) {
    case(
    idx == 0,
    "DomainJoin",
    idx == 1,
    "DomainTrust",
    idx == 2,
    "FSLogix",
    idx == 3,
    "SxSStack",
    idx == 4,
    "URLCheck",
    idx == 5,
    "GenevaAgent",
    idx == 6,
    "DomainReachable",
    idx == 7,
    "WebRTCRedirector",
    idx == 8,
    "SxSStackEncryption",
    idx == 9,
    "IMDSReachable",
    idx == 10,
    "MSIXPackageStaging",
    strcat("InvalidNameIndex: ", idx)
)
};
let GetHealthCheckResult = (idx: long) {
    case(
    idx == 0,
    "Unknown",
    idx == 1,
    "Succeeded",
    idx == 2,
    "Failed",
    idx == 3,
    "SessionHostShutdown",
    strcat("InvalidResultIndex: ", idx)
)
};
WVDAgentHealthStatus
// In some states (e.g. Unavailable, Upgrading) hosts are not running health checks
| where isnotempty(SessionHostHealthCheckResult)
| mv-expand SessionHostHealthCheckResult to typeof(dynamic)
| evaluate bag_unpack(SessionHostHealthCheckResult)
| evaluate bag_unpack(AdditionalFailureDetails)
| extend HealthCheckDesc = HealthCheckIdToDescription(HealthCheckName)
| where HealthCheckResult == 2
| where HealthCheckDesc contains "MSIXPackage"
// Parse the Message column to extract application names and error codes
| extend ParsedErrors = extract_all(@"(\[.*?\(.*?\)\])", tostring(Message)) 
| mv-expand ParsedErrors
| extend ParsedErrors = tostring(ParsedErrors) // Ensure ParsedErrors is treated as a string
| extend AppName = extract(@"^\[(.*?)(_.*?_)", 1, ParsedErrors),
         ErrorCode = extract(@"\((.*?)\.", 1, ParsedErrors),
         ErrorMessage = extract(@"\((.*?NeedsAssistance)\)", 1, ParsedErrors)
// Select only the desired columns
| project TimeGenerated, SessionHostName, AppName, ErrorCode, ErrorMessage, StatusTimeStamp
//| where SessionHostName contains "M01PSSPI0372"
//| sort by TimeGenerated desc 
